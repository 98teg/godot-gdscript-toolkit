start: (_NL | stmt)*

stmt: (simple_stmt _NL) | compound_stmt
simple_stmt: tool_stmt
| signal_stmt
| extends_stmt
| classname_stmt
| var_stmt
| const_stmt
| export_stmt
| onready_stmt
compound_stmt: class_def
| enum_def
| func_def

tool_stmt: "tool"
signal_stmt: "signal" NAME
extends_stmt: "extends" NAME
classname_stmt: "class_name" NAME
export_stmt: export_inf
| export_typed
export_inf: "export" var_assigned
export_typed: "export(" TYPE ")" var_stmt
var_stmt: var_empty
| var_assigned
var_empty: "var" NAME
var_assigned: "var" NAME "=" expr
const_stmt: "const" NAME "=" expr
onready_stmt: "onready" var_stmt

func_def: "func" NAME "():" func_body
func_body: _NL _INDENT func_stmt+ _DEDENT
func_stmt: simple_func_stmt _NL
| compound_func_stmt
simple_func_stmt: pass_stmt
| var_stmt
| expr
compound_func_stmt: if_stmt
pass_stmt: "pass"
if_stmt: "if" expr ":" func_body ("elif" expr ":" func_body)* [ "else" ":" func_body ]

enum_def: enum_regular
| enum_named
enum_regular: "enum" enum_body
enum_named: "enum" NAME enum_body
enum_body: "{" WS* [ (enum_entry [ "," ] WS*)* ] "}"
enum_entry: NAME

class_def: "class" NAME ":" suite
suite: _NL _INDENT stmt+ _DEDENT

expr: NAME | NUMBER

TYPE: NAME
_NL: /(\r?\n[\t ]*)+/

%declare _INDENT _DEDENT

%ignore WS_INLINE

%import common.NUMBER
%import common.WS
%import common.WS_INLINE
%import common.CNAME -> NAME
